services:
  todo-frontend:
    image: todo-frontend
    build:
      context: ./todo-frontend/ # The context will pick this directory as the "build context"
      dockerfile: Dockerfile.dev # This will simply tell which Dockerfile to read
    volumes:
      - ./todo-frontend:/usr/src/app # The path can be relative, so ./ is enough to say "the same location as the docker-compose.yml"
    # ports:
    #   - 3000:3000
    container_name: todo-frontend
    environment:
      - REACT_APP_BACKEND_URL=http://localhost:8080/api/

  todo-backend:
    image: todo-backend
    build:
      context: ./todo-backend/
      dockerfile: Dockerfile.dev
    volumes:
      - ./todo-backend:/usr/src/app
    # ports:
    #   - 4000:4000
    container_name: todo-backend
    environment:
      - MONGO_URL=mongodb://the_username:the_password@mongo:27017/the_database
      - REDIS_URL=redis://redis:6379

  mongo:
    image: mongo
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: the_database
    volumes:
      - ./todo-backend/mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
      - ./todo-backend/mongo_data:/data/db

  redis:
    image: docker.io/bitnami/redis:7.0
    environment:
      # ALLOW_EMPTY_PASSWORD is recommended only for development.
      - ALLOW_EMPTY_PASSWORD=yes
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
    ports:
      - "6379:6379"
    volumes:
      - ./todo-backend/redis_data:/bitnami/redis/data

  nginx:
    image: nginx:1.20.1
    volumes:
      - ./nginx.dev.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 8080:80
    container_name: reverse-proxy
    depends_on:
      - todo-frontend # wait for the frontend container to be started
